// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/photos/library/v1/photos_library.proto

package com.google.photos.library.v1.proto;

/**
 * <pre>
 * This is a set of pre-defined content categories that you can filter on.
 * </pre>
 * <p>
 * Protobuf enum {@code google.photos.library.v1.ContentCategory}
 */
public enum ContentCategory implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default content category. This category is ignored when any other category
     * is used in the filter.
     * </pre>
     *
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <pre>
     * Media items containing landscapes.
     * </pre>
     *
     * <code>LANDSCAPES = 1;</code>
     */
    LANDSCAPES(1),
    /**
     * <pre>
     * Media items containing receipts.
     * </pre>
     *
     * <code>RECEIPTS = 2;</code>
     */
    RECEIPTS(2),
    /**
     * <pre>
     * Media items containing cityscapes.
     * </pre>
     *
     * <code>CITYSCAPES = 3;</code>
     */
    CITYSCAPES(3),
    /**
     * <pre>
     * Media items containing landmarks.
     * </pre>
     *
     * <code>LANDMARKS = 4;</code>
     */
    LANDMARKS(4),
    /**
     * <pre>
     * Media items that are selfies.
     * </pre>
     *
     * <code>SELFIES = 5;</code>
     */
    SELFIES(5),
    /**
     * <pre>
     * Media items containing people.
     * </pre>
     *
     * <code>PEOPLE = 6;</code>
     */
    PEOPLE(6),
    /**
     * <pre>
     * Media items containing pets.
     * </pre>
     *
     * <code>PETS = 7;</code>
     */
    PETS(7),
    /**
     * <pre>
     * Media items from weddings.
     * </pre>
     *
     * <code>WEDDINGS = 8;</code>
     */
    WEDDINGS(8),
    /**
     * <pre>
     * Media items from birthdays.
     * </pre>
     *
     * <code>BIRTHDAYS = 9;</code>
     */
    BIRTHDAYS(9),
    /**
     * <pre>
     * Media items containing documents.
     * </pre>
     *
     * <code>DOCUMENTS = 10;</code>
     */
    DOCUMENTS(10),
    /**
     * <pre>
     * Media items taken during travel.
     * </pre>
     *
     * <code>TRAVEL = 11;</code>
     */
    TRAVEL(11),
    /**
     * <pre>
     * Media items containing animals.
     * </pre>
     *
     * <code>ANIMALS = 12;</code>
     */
    ANIMALS(12),
    /**
     * <pre>
     * Media items containing food.
     * </pre>
     *
     * <code>FOOD = 13;</code>
     */
    FOOD(13),
    /**
     * <pre>
     * Media items from sporting events.
     * </pre>
     *
     * <code>SPORT = 14;</code>
     */
    SPORT(14),
    /**
     * <pre>
     * Media items taken at night.
     * </pre>
     *
     * <code>NIGHT = 15;</code>
     */
    NIGHT(15),
    /**
     * <pre>
     * Media items from performances.
     * </pre>
     *
     * <code>PERFORMANCES = 16;</code>
     */
    PERFORMANCES(16),
    /**
     * <pre>
     * Media items containing whiteboards.
     * </pre>
     *
     * <code>WHITEBOARDS = 17;</code>
     */
    WHITEBOARDS(17),
    /**
     * <pre>
     * Media items that are screenshots.
     * </pre>
     *
     * <code>SCREENSHOTS = 18;</code>
     */
    SCREENSHOTS(18),
    /**
     * <pre>
     * Media items that are considered to be utility. These include, but aren't
     * limited to documents, screenshots, whiteboards etc.
     * </pre>
     *
     * <code>UTILITY = 19;</code>
     */
    UTILITY(19),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Default content category. This category is ignored when any other category
     * is used in the filter.
     * </pre>
     *
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <pre>
     * Media items containing landscapes.
     * </pre>
     *
     * <code>LANDSCAPES = 1;</code>
     */
    public static final int LANDSCAPES_VALUE = 1;
    /**
     * <pre>
     * Media items containing receipts.
     * </pre>
     *
     * <code>RECEIPTS = 2;</code>
     */
    public static final int RECEIPTS_VALUE = 2;
    /**
     * <pre>
     * Media items containing cityscapes.
     * </pre>
     *
     * <code>CITYSCAPES = 3;</code>
     */
    public static final int CITYSCAPES_VALUE = 3;
    /**
     * <pre>
     * Media items containing landmarks.
     * </pre>
     *
     * <code>LANDMARKS = 4;</code>
     */
    public static final int LANDMARKS_VALUE = 4;
    /**
     * <pre>
     * Media items that are selfies.
     * </pre>
     *
     * <code>SELFIES = 5;</code>
     */
    public static final int SELFIES_VALUE = 5;
    /**
     * <pre>
     * Media items containing people.
     * </pre>
     *
     * <code>PEOPLE = 6;</code>
     */
    public static final int PEOPLE_VALUE = 6;
    /**
     * <pre>
     * Media items containing pets.
     * </pre>
     *
     * <code>PETS = 7;</code>
     */
    public static final int PETS_VALUE = 7;
    /**
     * <pre>
     * Media items from weddings.
     * </pre>
     *
     * <code>WEDDINGS = 8;</code>
     */
    public static final int WEDDINGS_VALUE = 8;
    /**
     * <pre>
     * Media items from birthdays.
     * </pre>
     *
     * <code>BIRTHDAYS = 9;</code>
     */
    public static final int BIRTHDAYS_VALUE = 9;
    /**
     * <pre>
     * Media items containing documents.
     * </pre>
     *
     * <code>DOCUMENTS = 10;</code>
     */
    public static final int DOCUMENTS_VALUE = 10;
    /**
     * <pre>
     * Media items taken during travel.
     * </pre>
     *
     * <code>TRAVEL = 11;</code>
     */
    public static final int TRAVEL_VALUE = 11;
    /**
     * <pre>
     * Media items containing animals.
     * </pre>
     *
     * <code>ANIMALS = 12;</code>
     */
    public static final int ANIMALS_VALUE = 12;
    /**
     * <pre>
     * Media items containing food.
     * </pre>
     *
     * <code>FOOD = 13;</code>
     */
    public static final int FOOD_VALUE = 13;
    /**
     * <pre>
     * Media items from sporting events.
     * </pre>
     *
     * <code>SPORT = 14;</code>
     */
    public static final int SPORT_VALUE = 14;
    /**
     * <pre>
     * Media items taken at night.
     * </pre>
     *
     * <code>NIGHT = 15;</code>
     */
    public static final int NIGHT_VALUE = 15;
    /**
     * <pre>
     * Media items from performances.
     * </pre>
     *
     * <code>PERFORMANCES = 16;</code>
     */
    public static final int PERFORMANCES_VALUE = 16;
    /**
     * <pre>
     * Media items containing whiteboards.
     * </pre>
     *
     * <code>WHITEBOARDS = 17;</code>
     */
    public static final int WHITEBOARDS_VALUE = 17;
    /**
     * <pre>
     * Media items that are screenshots.
     * </pre>
     *
     * <code>SCREENSHOTS = 18;</code>
     */
    public static final int SCREENSHOTS_VALUE = 18;
    /**
     * <pre>
     * Media items that are considered to be utility. These include, but aren't
     * limited to documents, screenshots, whiteboards etc.
     * </pre>
     *
     * <code>UTILITY = 19;</code>
     */
    public static final int UTILITY_VALUE = 19;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                    "Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContentCategory valueOf(int value) {
        return forNumber(value);
    }

    public static ContentCategory forNumber(int value) {
        switch (value) {
            case 0:
                return NONE;
            case 1:
                return LANDSCAPES;
            case 2:
                return RECEIPTS;
            case 3:
                return CITYSCAPES;
            case 4:
                return LANDMARKS;
            case 5:
                return SELFIES;
            case 6:
                return PEOPLE;
            case 7:
                return PETS;
            case 8:
                return WEDDINGS;
            case 9:
                return BIRTHDAYS;
            case 10:
                return DOCUMENTS;
            case 11:
                return TRAVEL;
            case 12:
                return ANIMALS;
            case 13:
                return FOOD;
            case 14:
                return SPORT;
            case 15:
                return NIGHT;
            case 16:
                return PERFORMANCES;
            case 17:
                return WHITEBOARDS;
            case 18:
                return SCREENSHOTS;
            case 19:
                return UTILITY;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ContentCategory> internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ContentCategory> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ContentCategory>() {
                public ContentCategory findValueByNumber(int number) {
                    return ContentCategory.forNumber(number);
                }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return com.google.photos.library.v1.proto.LibraryServiceProto.getDescriptor()
                .getEnumTypes()
                .get(1);
    }

    private static final ContentCategory[] VALUES = values();

    public static ContentCategory valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private ContentCategory(int value) {
        this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.photos.library.v1.ContentCategory)
}
